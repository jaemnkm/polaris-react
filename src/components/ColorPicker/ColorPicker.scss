@import '../../styles/common';

$picker-width: rem(160px);
$picker-with-alpha-width: rem(194px);
$picker-height: $picker-width;
$dragger-size: rem(18px);
$text-picker-width: rem(192px);
$text-picker-with-alpha-width: $picker-width;
$alpha-size: rem(90px);
$inner-shadow: inset 0 0 2px 0 rgba(0, 0, 0, 0.5);

$stacking-order: (
  color: 10,
  adjustments: 20,
  dragger: 30,
);

$swatch-size: rem(20px);
$swatch-shadow: inset rgba(0, 0, 0, 0.07) 0 0 0 1px,
  inset rgba(0, 0, 0, 0.15) 0 1px 3px 0;

$palette-size: rem(25px);
$palette-mobile-size: rem(40px);

@mixin checkers {
  background-image: linear-gradient(45deg, color('sky') 25%, transparent 25%),
    linear-gradient(-45deg, color('sky') 25%, transparent 25%),
    linear-gradient(45deg, transparent 75%, color('sky') 75%),
    linear-gradient(-45deg, transparent 75%, color('sky') 75%);
  background-size: spacing() spacing();
  background-position: 0 0, 0 spacing(tight), spacing(tight) -1 * spacing(tight),
    -1 * spacing(tight) 0;
}

.ColorPicker {
  user-select: none;
  display: flex;
}

.MainColor {
  @include checkers;
  position: relative;
  overflow: hidden;
  height: $picker-height;
  width: $picker-width;

  &.AlphaAllowed {
    width: $picker-with-alpha-width;
  }

  // Need an extra pixel to avoid a small color bleed from happening
  border-radius: border-radius() + 1px;
  cursor: pointer;

  .Dragger {
    right: 0.5 * $dragger-size;
    margin: 0;
  }

  .ColorLayer {
    box-shadow: inset shadow(deep);
    border-radius: border-radius() + 1px;
  }

  &::after,
  &::before {
    content: '';
    position: absolute;
    z-index: z-index(adjustments, $stacking-order);
    top: 0;
    left: 0;
    display: block;
    height: 100%;
    width: 100%;
    pointer-events: none;
    border-radius: border-radius();
  }

  &::before {
    background: linear-gradient(to right, white, transparent);
  }

  &::after {
    background-image: linear-gradient(to top, black, transparent);
    box-shadow: inset shadow(deep);
  }
}

.Dragger {
  position: relative;
  z-index: z-index(dragger, $stacking-order);
  bottom: 0.5 * $dragger-size;
  transform: none;
  height: $dragger-size;
  width: $dragger-size;
  margin: 0 auto;
  will-change: transform;
  background: transparent;
  border: border-radius() solid color('white');
  box-shadow: shadow(deep), inset shadow(deep);
  border-radius: 50%;
  pointer-events: none;
}

$green: rgb(0, 255, 0);
$purple: rgb(255, 0, 255);
$huepicker-padding: $dragger-size;
$huepicker-bottom-padding-start: $picker-width - $dragger-size;

.HuePicker,
.AlphaPicker {
  position: relative;
  overflow: hidden;
  height: $picker-height;
  width: rem(24px);
  margin-left: spacing(tight);
  border-width: border-radius();
  border-radius: $picker-height * 0.5;
}

.HuePicker {
  background-image: linear-gradient(
    to bottom,
    red $dragger-size,
    yellow,
    $green,
    cyan,
    blue,
    $purple,
    red $huepicker-bottom-padding-start
  );
  box-shadow: $inner-shadow;
}

.AlphaPicker {
  @include checkers;

  .ColorLayer {
    border-radius: $picker-height * 0.5;
  }
}

.ColorLayer {
  position: absolute;
  z-index: z-index(color, $stacking-order);
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  box-shadow: $inner-shadow;
  pointer-events: none;
}

.Slidable {
  height: 100%;
  width: 100%;
  cursor: pointer;
}

.TextFields {
  display: flex;
}

.TextPicker {
  width: $text-picker-width;
  margin-top: spacing(tight);

  &.AlphaAllowed {
    width: $text-picker-with-alpha-width;
  }
}

.TextFieldSwatch {
  width: $swatch-size;
  height: $swatch-size;
  margin-left: -(spacing(extra-tight));
  border-radius: 50%;
  box-shadow: $swatch-shadow;

  &.AlphaAllowed {
    @include checkers;
  }
}

.SwatchBackground {
  width: 100%;
  height: 100%;
  border-radius: inherit;
  box-shadow: inherit;
}

.AlphaField {
  width: $alpha-size;
  margin: spacing(tight) 0 0 spacing(tight);
}

.RecentlySelectedTitle {
  @include text-style-subheading;
  padding: (spacing(tight) * 1.5) 0 0;
}

.RecentlySelectedPalettes {
  display: flex;
}

.RecentlySelectedPalette {
  width: $palette-mobile-size;
  height: $palette-mobile-size;
  border-radius: 3px;
  box-shadow: 3px;
  margin-top: spacing(tight);

  @include when-typography-not-condensed {
    width: $palette-size;
    height: $palette-size;
  }

  &:not(:last-of-type) {
    margin-right: spacing(tight);
  }

  &.AlphaAllowed {
    @include checkers;
  }
}
